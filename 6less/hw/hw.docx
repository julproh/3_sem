Контрольные вопросы

1.Специальные функции-члены класса.


Конструкторы (по умолчанию, пользовательские, копирующий, перемещающий), деструкторы,копирующий оператор присваивания, перемещающий оператор присваивания, другие операторы, геттеры, сеттеры.

2. Операторы, которые можно, нельзя и не рекомендуется перегружать.

Можно: →, », «, (), [], +, -, *,/
Не рекомендуется: &
Нельзя: ?:, ::, ., .*

3. Преобразования при проектировании проекта:

Неявных преобразованиях типа. 
В одном случае они могут просто понижать точность вычислений, а в другом лишать арифметику всякого смысла. Также относятся операции с различными int-ами (умножение unsigned int на int).
	
Так же в зависимости от того, что меняет оператор внутри класса, он может быть методом класса, может быть его другом, а может осуществлять взаимодействие с классом посредством геттеров и сеттеров.


4. Классификация выражений на основе перемещаемости и идетифицируемости.

Идентефицируемы - glvalue, перемещаемы - rvalue.
 
Из этих двух свойств определены 3 типа выражений:
    • lvalue - идентефицируемые и не перемещаемые
    • xvalue - идентефицируемые и перемещаемые
    • prvalue - неидентефицируемы и перемещаемые

5. rvalue-ссылки

    • могут ссылаться на r-value, тем самым увеличивая время жизни
    • позволяют изменять значение объекта, на который ссылаются
    • можно использовать в качестве аргументов функции в том числе для создания перегрузок
    • для перемещения значения одной переменной в другую без копирования

6. Семантика перемещения

Если мы создаем объект или выполняем присваивание, где аргументом является r-value, то мы знаем, что r-value — это просто некоторый временный объект. Вместо того, чтобы копировать его (что может быть затратно), мы можем просто переместить его ресурсы (что не так затратно) в другой объект, который мы создаем или которому присваиваем текущий. Это безопасно, поскольку временный объект будет уничтожен в конце выражения в любом случае, поэтому мы можем быть уверены, что он никогда не будет повторно использован. (также не все можно скопировать)
  
7. std::move

Функция std::move конвертирует передаваемый аргумент в r-value.Мы можем передать l-value в функцию std::move(), и std::move() вернет нам ссылку r-value.

8. Перемещающий оператор присваивания или конструктор перемещения.


9. Пользовательская реализация специальных функций-членов класса может потребоваться:
    • если недостаточно функций по умолчанию(работают не так, как нужно в конкретной задаче)
    • при необходимости перегрузить конструктор класса
    • когда нужны конструктор и оператор присваивания перемещением 

10. default и delete

default используем, если нужно указать компилятору, что спец. фукнция создается по умолчанию
delete используем, чтобы компилятор не создавал такую специальную функцию самостоятельно - её не должно быть.
