Контрольные вопросы

1 Шаблон и его разновидности.

Шаблоны являются средствами метапрограммирования и реализуют полиморфизм времени компиляции. 

Шаблоны функций – это обобщенное описание поведения функций, которые могут вызываться для объектов разных типов.  По описанию шаблон функции похож на обычную функцию, но некоторые элементы не определены и являются параметризованными.

Шаблоны классов – обобщенное описание пользовательского типа, в котором могут быть параметризованы атрибуты и операции типа. Представляют собой конструкции, по которым могут быть сгенерированы действительные классы путём подстановки вместо параметров конкретных аргументов.


2 Двухэтапная трансляция шаблонов.

Шаблоны “компилируются” в два этапа.
1 - Во время определения (definition time) код шаблона проверяется на корректность без инстанцирования, с игнорированием параметров шаблонов. Этот процесс включает: выявление синтаксических ошибок, выявление применения неизвестных имен, которые не зависят от параметров шаблона, выполнение проверок статических утверждений, не зависящих от параметров шаблонов.
2 - Во время инстанцирования код шаблона вновь проверяется на корректность.

3 Перегрузка шаблонов функции.

Шаблоны функций могут быть перегружены. То есть можно иметь различные определения функций с одним и тем же именем, так что компилятор C++ должен решить, какой из нескольких кандидатов должен быть вызван.

Нешаблонная функция может сосуществовать с шаблоном функции с тем же именем. При всех прочих равных факторах, процесс разрешения перегрузки предпочитает нешаблонные функции тем, которые генерируются из шаблона. Если шаблон может генерировать функцию с лучшим соответствием, то будет выбран шаблон.

4 Особенность инстанцирования шаблонов классов.

Процесс замены параметров шаблона конкретными типами называется инстанцированием шаблона. Его результатом является экземпляр шаблона. Процесс инстанцирования запускается простым использованием шаблона функции. Специально требовать от компилятора инстанцирования шаблона не нужно.  Инстанцируются лишь те классы, которые используются в ходе программы. И происходит это единожды.
Различают неявное инстанцирование, которое происходит при вызове функции или создании объекта класса, и явное инстанцирование с помощью резервированного слова template. Инстанцирование можно делать только в точке программы, где доступна реализация шаблона функции или методов шаблонного класса.

5 Полная и частичная специализация шаблонов.

При использовании полной специализации шаблона, все его параметры должны быть явно определены. Но это не всегда удобно, тогда можно использовать частичную специализацию.
 Частичная специализация шаблона позволяет выполнить специализацию шаблона класса, где лишь некоторые параметры шаблона явно определены

